# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  post(relativePath: String): Post!
  postConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PostFilter): PostConnection!
  page(relativePath: String): Page!
  pageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PageFilter): PageConnection!
  author(relativePath: String): Author!
  authorConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorFilter): AuthorConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  post: PostFilter
  page: PageFilter
  author: AuthorFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Post | Page | Author | Settings | Folder

type PostSeo {
  metaTitle: String
  metaDescription: String
  keywords: [String]
}

type Post implements Node & Document {
  title: String!
  excerpt: String!
  date: String!
  readTime: Float!
  featuredImage: String!
  authorId: String!
  categoryId: String!
  tags: [String]
  slug: String
  body: JSON
  seo: PostSeo
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input PostBodyCalloutFilter {
  type: StringFilter
  title: StringFilter
  content: RichTextFilter
}

input PostBodyCodeBlockFilter {
  language: StringFilter
  code: StringFilter
}

input PostBodyImageGalleryImagesFilter {
  src: ImageFilter
  alt: StringFilter
  caption: StringFilter
}

input PostBodyImageGalleryFilter {
  images: PostBodyImageGalleryImagesFilter
}

input PostBodyFilter {
  Callout: PostBodyCalloutFilter
  CodeBlock: PostBodyCodeBlockFilter
  ImageGallery: PostBodyImageGalleryFilter
}

input PostSeoFilter {
  metaTitle: StringFilter
  metaDescription: StringFilter
  keywords: StringFilter
}

input PostFilter {
  title: StringFilter
  excerpt: StringFilter
  date: DatetimeFilter
  readTime: NumberFilter
  featuredImage: ImageFilter
  authorId: StringFilter
  categoryId: StringFilter
  tags: StringFilter
  slug: StringFilter
  body: PostBodyFilter
  seo: PostSeoFilter
}

type PostConnectionEdges {
  cursor: String!
  node: Post
}

type PostConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PostConnectionEdges]
}

type Page implements Node & Document {
  title: String!
  description: String
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PageFilter {
  title: StringFilter
  description: StringFilter
  body: RichTextFilter
}

type PageConnectionEdges {
  cursor: String!
  node: Page
}

type PageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PageConnectionEdges]
}

type AuthorSocial {
  twitter: String
  github: String
  linkedin: String
  email: String
}

type Author implements Node & Document {
  name: String!
  avatar: String
  bio: String
  social: AuthorSocial
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorSocialFilter {
  twitter: StringFilter
  github: StringFilter
  linkedin: StringFilter
  email: StringFilter
}

input AuthorFilter {
  name: StringFilter
  avatar: ImageFilter
  bio: StringFilter
  social: AuthorSocialFilter
}

type AuthorConnectionEdges {
  cursor: String!
  node: Author
}

type AuthorConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorConnectionEdges]
}

type SettingsSiteMetadataAuthor {
  name: String
  summary: String
}

type SettingsSiteMetadataSocial {
  twitter: String
  instagram: String
  facebook: String
  github: String
}

type SettingsSiteMetadata {
  title: String
  description: String
  author: SettingsSiteMetadataAuthor
  social: SettingsSiteMetadataSocial
}

type SettingsNavigation {
  name: String
  href: String
}

type SettingsAuthorsSocial {
  github: String
  linkedin: String
  twitter: String
  facebook: String
  email: String
}

type SettingsAuthors {
  id: String
  name: String
  avatar: String
  bio: String
  social: SettingsAuthorsSocial
}

type SettingsCategories {
  id: String
  name: String
  slug: String
}

type Settings implements Node & Document {
  siteMetadata: SettingsSiteMetadata
  navigation: [SettingsNavigation]
  authors: [SettingsAuthors]
  categories: [SettingsCategories]
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsSiteMetadataAuthorFilter {
  name: StringFilter
  summary: StringFilter
}

input SettingsSiteMetadataSocialFilter {
  twitter: StringFilter
  instagram: StringFilter
  facebook: StringFilter
  github: StringFilter
}

input SettingsSiteMetadataFilter {
  title: StringFilter
  description: StringFilter
  author: SettingsSiteMetadataAuthorFilter
  social: SettingsSiteMetadataSocialFilter
}

input SettingsNavigationFilter {
  name: StringFilter
  href: StringFilter
}

input SettingsAuthorsSocialFilter {
  github: StringFilter
  linkedin: StringFilter
  twitter: StringFilter
  facebook: StringFilter
  email: StringFilter
}

input SettingsAuthorsFilter {
  id: StringFilter
  name: StringFilter
  avatar: StringFilter
  bio: StringFilter
  social: SettingsAuthorsSocialFilter
}

input SettingsCategoriesFilter {
  id: StringFilter
  name: StringFilter
  slug: StringFilter
}

input SettingsFilter {
  siteMetadata: SettingsSiteMetadataFilter
  navigation: SettingsNavigationFilter
  authors: SettingsAuthorsFilter
  categories: SettingsCategoriesFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updatePost(relativePath: String!, params: PostMutation!): Post!
  createPost(relativePath: String!, params: PostMutation!): Post!
  updatePage(relativePath: String!, params: PageMutation!): Page!
  createPage(relativePath: String!, params: PageMutation!): Page!
  updateAuthor(relativePath: String!, params: AuthorMutation!): Author!
  createAuthor(relativePath: String!, params: AuthorMutation!): Author!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  post: PostMutation
  page: PageMutation
  author: AuthorMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  post: PostMutation
  page: PageMutation
  author: AuthorMutation
  settings: SettingsMutation
}

input PostSeoMutation {
  metaTitle: String
  metaDescription: String
  keywords: [String]
}

input PostMutation {
  title: String
  excerpt: String
  date: String
  readTime: Float
  featuredImage: String
  authorId: String
  categoryId: String
  tags: [String]
  slug: String
  body: JSON
  seo: PostSeoMutation
}

input PageMutation {
  title: String
  description: String
  body: JSON
}

input AuthorSocialMutation {
  twitter: String
  github: String
  linkedin: String
  email: String
}

input AuthorMutation {
  name: String
  avatar: String
  bio: String
  social: AuthorSocialMutation
}

input SettingsSiteMetadataAuthorMutation {
  name: String
  summary: String
}

input SettingsSiteMetadataSocialMutation {
  twitter: String
  instagram: String
  facebook: String
  github: String
}

input SettingsSiteMetadataMutation {
  title: String
  description: String
  author: SettingsSiteMetadataAuthorMutation
  social: SettingsSiteMetadataSocialMutation
}

input SettingsNavigationMutation {
  name: String
  href: String
}

input SettingsAuthorsSocialMutation {
  github: String
  linkedin: String
  twitter: String
  facebook: String
  email: String
}

input SettingsAuthorsMutation {
  id: String
  name: String
  avatar: String
  bio: String
  social: SettingsAuthorsSocialMutation
}

input SettingsCategoriesMutation {
  id: String
  name: String
  slug: String
}

input SettingsMutation {
  siteMetadata: SettingsSiteMetadataMutation
  navigation: [SettingsNavigationMutation]
  authors: [SettingsAuthorsMutation]
  categories: [SettingsCategoriesMutation]
}

schema {
  query: Query
  mutation: Mutation
}
